!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
console	init.go	/^	dataPath  = os.Getenv("data_path")$/;"	v
dataPath	init.go	/^var ($/;"	v
execAction	exec.go	/^func execAction(context *cli.Context) {$/;"	f
execCommand	exec.go	/^var execCommand = cli.Command{$/;"	v
getContainerSpec	spec.go	/^func getContainerSpec(container *libcontainer.Container) (string, error) {$/;"	f
getContainerStats	stats.go	/^func getContainerStats(container *libcontainer.Container) (string, error) {$/;"	f
initAction	init.go	/^func initAction(context *cli.Context) {$/;"	f
initCommand	init.go	/^	rawPipeFd = os.Getenv("pipe")$/;"	v
loadContainer	utils.go	/^func loadContainer() (*libcontainer.Container, error) {$/;"	f
loadContainerFromJson	utils.go	/^func loadContainerFromJson(rawData string) (*libcontainer.Container, error) {$/;"	f
logPath	main.go	/^var logPath = os.Getenv("log")$/;"	v
main	exec.go	/^package main$/;"	p
main	init.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
main	nsenter.go	/^package main$/;"	p
main	spec.go	/^package main$/;"	p
main	stats.go	/^package main$/;"	p
main	utils.go	/^package main$/;"	p
nsenterAction	nsenter.go	/^func nsenterAction(context *cli.Context) {$/;"	f
nsenterCommand	nsenter.go	/^var nsenterCommand = cli.Command{$/;"	v
openLog	utils.go	/^func openLog(name string) error {$/;"	f
preload	main.go	/^func preload(context *cli.Context) error {$/;"	f
rawPipeFd	init.go	/^	console   = os.Getenv("console")$/;"	v
readPid	utils.go	/^func readPid() (int, error) {$/;"	f
specAction	spec.go	/^func specAction(context *cli.Context) {$/;"	f
specCommand	spec.go	/^var specCommand = cli.Command{$/;"	v
startContainer	exec.go	/^func startContainer(container *libcontainer.Container, term namespaces.Terminal, dataPath string, args []string) (int, error) {$/;"	f
statsAction	stats.go	/^func statsAction(context *cli.Context) {$/;"	f
statsCommand	stats.go	/^var statsCommand = cli.Command{$/;"	v
